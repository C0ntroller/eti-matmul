import statistics
import pandas as pd
import matplotlib.pyplot as plt


# dict: number of processes, List of time for each run
# {1: [time in ms, time in ms, ...],
#  2: [...],
#  3: [...]}
data = {1: [6126.532000,6112.959000,6113.315000,6110.926000,6112.945000,6110.253000,6114.919000,6114.739000,6114.211000,6110.104000],
        2: [3326.090000,3298.715000,3296.325000,3299.974000,3299.987000,3296.117000,3296.136000,3299.823000,3299.746000,3297.478000],
        3: [2087.025000,2055.188000,2056.047000,2056.439000,2056.418000,2056.070000,2052.969000,2052.549000,2053.808000,2053.541000],
        4: [1697.786000,1640.240000,1638.672000,1639.798000,1639.988000,1639.683000,1639.762000,1639.393000,1637.631000,1637.737000],
        5: [1429.016000,1364.016000,1360.034000,1359.627000,1356.379000,1356.911000,1359.527000,1359.668000,1359.181000,1359.008000],
        6: [1315.809000,1239.020000,1236.197000,1236.756000,1237.033000,1237.201000,1237.554000,1237.058000,1238.329000,1238.338000],
        7: [1300.936000,1227.201000,1228.528000,1227.045000,1226.532000,1227.339000,1229.071000,1226.453000,1226.508000,1226.402000],
        8: [1210.313000,1180.928000,1177.426000,1179.911000,1181.666000,1182.219000,1179.078000,1178.985000,1180.604000,1181.505000],
        9: [1202.440000,1173.967000,1172.636000,1176.689000,1176.856000,1177.102000,1176.721000,1176.785000,1177.171000,1177.499000],
        10: [1207.817000,1176.748000,1178.181000,1179.092000,1176.291000,1178.000000,1176.267000,1178.084000,1176.729000,1178.329000],
        11: [1201.150000,1172.413000,1170.975000,1173.342000,1172.641000,1174.245000,1170.978000,1173.488000,1172.705000,1172.677000],
        12: [1204.476000,1177.030000,1176.099000,1177.251000,1176.347000,1175.999000,1177.033000,1176.601000,1175.388000,1174.787000],
        13: [1098.687000,1072.299000,1071.528000,1070.668000,1068.785000,1072.037000,1068.293000,1070.898000,1070.595000,1071.908000],
        14: [1039.835000,1012.679000,1011.386000,1014.121000,1012.449000,1012.003000,1013.060000,1010.204000,1015.835000,1011.353000],
        15: [980.044000,949.666000,945.148000,954.041000,948.754000,948.242000,952.856000,953.755000,948.714000,949.568000],
        16: [933.932000,897.266000,897.041000,896.654000,896.913000,896.807000,896.639000,896.742000,896.886000,896.963000],
        17: [911.764000,857.948000,858.246000,858.085000,857.866000,857.936000,857.968000,858.002000,857.995000,858.282000],
        18: [867.854000,814.331000,814.035000,814.156000,813.980000,814.061000,813.752000,814.054000,813.921000,814.049000],
        19: [816.192000,763.097000,762.687000,761.352000,761.123000,761.223000,761.071000,761.240000,761.262000,761.432000],
        20: [782.706000,730.032000,729.532000,729.561000,729.658000,729.640000,729.428000,729.613000,729.860000,729.686000],
        21: [756.962000,705.784000,705.885000,706.015000,705.990000,705.841000,705.959000,705.869000,706.080000,706.025000],
        22: [725.526000,676.801000,676.580000,676.751000,676.493000,676.570000,676.667000,676.842000,676.702000,676.884000],
        23: [699.099000,649.778000,649.283000,649.361000,649.245000,649.504000,649.410000,649.586000,649.372000,649.560000],
        24: [670.656000,625.501000,625.592000,625.427000,625.243000,625.763000,625.202000,625.427000,625.405000,625.628000],
        25: [1098.182000,601.942000,601.565000,601.800000,601.648000,601.643000,601.163000,601.756000,601.552000,601.462000],
        26: [1326.968000,580.231000,580.002000,579.588000,579.851000,579.838000,579.516000,579.755000,579.786000,580.011000],
        27: [1112.262000,548.071000,547.782000,547.589000,548.177000,547.878000,548.249000,547.506000,548.325000,547.478000],
        28: [1319.300000,542.349000,541.912000,542.327000,541.998000,542.733000,541.911000,542.550000,541.873000,542.145000],
        29: [1289.998000,516.697000,516.187000,515.861000,515.752000,515.305000,515.507000,515.507000,516.092000,515.464000],
        30: [1527.245000,511.480000,512.025000,512.120000,511.926000,511.782000,512.055000,511.633000,512.207000,512.314000],
        31: [1766.716000,491.279000,490.619000,490.958000,490.683000,490.737000,490.560000,490.961000,490.218000,490.416000],
        32: [2127.341000,508.955000,579.118000,496.660000,472.958000,467.369000,467.564000,469.504000,469.918000,470.685000],
        33: [1258.937000,457.767000,460.292000,456.545000,456.996000,459.404000,460.810000,458.997000,456.708000,455.682000],
        34: [1741.048000,448.104000,443.624000,443.870000,441.815000,443.304000,443.401000,444.616000,444.792000,444.349000],
        35: [1475.756000,434.042000,431.520000,430.692000,431.975000,431.655000,430.230000,433.692000,430.579000,433.243000],
        36: [1290.704000,425.443000,423.840000,422.553000,424.093000,423.608000,423.139000,425.050000,422.819000,423.624000],
        37: [2376.329000,413.745000,410.000000,409.620000,409.743000,407.531000,407.827000,407.697000,408.226000,409.365000],
        38: [1940.345000,406.089000,399.889000,399.455000,399.188000,399.299000,399.804000,399.017000,401.166000,402.645000],
        39: [2794.033000,395.977000,394.115000,393.470000,396.604000,392.755000,392.962000,392.894000,396.206000,391.022000],
        40: [2551.008000,380.966000,381.298000,386.545000,381.941000,379.830000,380.684000,383.323000,380.426000,380.421000],
        41: [1769.386000,378.907000,376.129000,376.847000,376.376000,376.252000,375.492000,378.370000,377.914000,376.462000],
        42: [2824.837000,370.982000,370.625000,373.094000,372.343000,370.806000,370.751000,369.257000,371.878000,371.044000],
        43: [3060.861000,368.412000,363.415000,363.762000,362.197000,363.243000,363.535000,364.706000,363.198000,364.586000],
        44: [3362.851000,357.671000,357.438000,355.968000,356.577000,356.433000,357.801000,358.501000,356.973000,355.280000],
        45: [2877.285000,355.676000,350.118000,353.338000,352.729000,350.197000,353.215000,353.722000,350.017000,352.796000],
        46: [2663.288000,344.272000,338.811000,337.974000,340.576000,338.082000,339.880000,344.138000,340.408000,340.821000],
        47: [2810.899000,331.491000,334.208000,332.057000,331.355000,331.695000,330.693000,332.020000,334.643000,331.977000],
        48: [3578.315000,333.416000,331.779000,329.943000,329.809000,330.226000,329.542000,333.923000,329.647000,329.941000],
        }

results = {}
# floatops for matrix with a size of 2048
# n ** 2 * (2n - 1)
float_ops = 2028 ** 2 * (2 * 2048 - 1)


for optimization in data.keys():
    
    flops = []
    for time in data[optimization]:
        # time should be in milliseconds
        flops.append(float_ops / time / 1000000) # convert to gflops

    results.update({optimization : flops})

# setup the dataframe

time = [statistics.median(i) for i in results.values()]
num_processes = results.keys()
_min = [min(i) for i in results.values()]
_max = [max(i) for i in results.values()]
df = pd.DataFrame({'#Processes':num_processes, 'Time':time, 'Min': _min, 'Max': _max})
df = (df.assign(yerr_min = df.Time-df.Min)
        .assign(yerr_max=df.Max-df.Time))

# plt.figure(figsize=(8, 6))
plt.bar(x='#Processes', height='Time', yerr=df[['yerr_min', 'yerr_max']].T.values, capsize=10, data=df)

plt.show()